plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}


static def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08:00"))
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    dexOptions {
        preDexLibraries false
    }
    defaultConfig {
        applicationId "com.lalifa.yyf"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        multiDexEnabled true
        //极光
        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }

        manifestPlaceholders = [
                JPUSH_PKGNAME : "com.lalifa.yyf",
                JPUSH_APPKEY : "4c9d2557b02c1bb77a6e1fd5", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL : "developer-default"
        ]

        // 写modes到BuildConfig
        buildConfigField("String[]", "YYF", "${modes()}")
    }

    signingConfigs {
        debug {
            keyAlias "key0"
            keyPassword "lalifa"
            storeFile file("./key.jks")
            storePassword 'lalifa'
        }
        release {
            keyAlias "key0"
            keyPassword "lalifa"
            storeFile file("./key.jks")
            storePassword 'lalifa'
        }
    }
    buildFeatures{
        dataBinding = true
        viewBinding = true
    }


    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "随心语音-${versionName}-${releaseTime()}.apk"
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    flavorDimensions("environment")
   // flavorDimensions("channel")// 线上环境
//    def developFlag = true

    productFlavors {
        // 开发环境
        develop {
            dimension 'environment'
            // 包名
            applicationId "com.lalifa.yyf"

            // 融云demo的AppKey，开发者可用来测试
            buildConfigField("String", "APP_KEY", "\"lmxuhwagl3jsd\"")
            // 融云demo对应服务器的测试地址，开发者可用来测试
            buildConfigField("String", "BASE_SERVER_ADDRES", "\"http://96yuyinfang.136.dianchuiguan.com.cn/\"")
            manifestPlaceholders = [
                    APP_NAME         : "@string/app_name",
                    // hifive音乐服务的 appid和servercode
                    HIFIVE_APPID     : "替换您hifive音乐服务的appid",//可选替换
                    HIFIVE_SERVERCODE: "替换您hifive音乐服务的servercode"//可选替换
            ]
        }
        // 官网正式环境
        official {
            dimension 'environment'
            applicationId "com.lalifa.yyf"
            buildConfigField("String", "APP_KEY", "\"lmxuhwagl3jsd\"")
            buildConfigField("String", "BASE_SERVER_ADDRES","\"http://api-sealtalk.rongcloud.cn/\"")
            manifestPlaceholders = [
                    APP_NAME         : "@string/app_name",
                    // hifive音乐服务的 appid和servercode
                    HIFIVE_APPID     : "xxxxxxxxxx",
                    HIFIVE_SERVERCODE: "xxxxxxxxxx"
            ]
        }
    }
}


dependencies {
    implementation fileTree(includes: ['*.aar'],  dir: 'libs')
    implementation android_ui.appcompat
    implementation android_ui.material
    implementation files('..\\libs\\commons-io-1.4.jar')
    implementation android_ui.appcompat
    implementation android_ui.material
    implementation 'com.android.support:multidex:1.0.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation project(path: ':business:main')
    implementation project(path: ':Base')
    implementation "cn.rongcloud.sdk:rclogger_lib:1.0.5"
    implementation "cn.rongcloud.sdk:voiceroom_lib:2.1.2"
}

def containMode(mode) {
    for (String temp in rootProject.ext.rc_busi) {
        if (mode.equals(temp)) {
            return true
        }
    }
    return false
}


def modes() {
    String busi = ""
    for (String temp in rootProject.ext.rc_busi) {
        busi += "\"${temp}\","
    }
    return "new String[]{" + busi.substring(0, busi.length() - 1) + "}"
}